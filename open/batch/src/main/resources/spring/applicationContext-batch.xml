<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
            http://www.springframework.org/schema/batch
            http://www.springframework.org/schema/batch/spring-batch-3.0.xsd">


    <!--jobLauncher负责batch的启动工作，jobRepository负责job的整个运行过程中的CRUD操作，transactionManager负责事务的管理操作。-->
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository"/>
    </bean>

    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>
    <!--事物支持-->
    <bean id="transactionManager"
          class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"/>


    <bean id="csvProcessor" class="com.varela.open.batch.processor.CsvProcessor"/>
    <!--自定义skip策略-->
    <bean id="myPolicy" class="com.varela.open.batch.policy.MyPolicy"/>


 <bean id="poolTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
     <property name="corePoolSize" value="10"/>
     <property name="maxPoolSize" value="20"/>
 </bean>
    <!--
       <bean id="taskExecutor" class="org.springframework.core.task.SimpleAsyncTaskExecutor"/>
       task-executor="taskExecutor" throttle-limit="20"-->
    <batch:job id="csvJob">
        <batch:step id="csvStep">
            <batch:tasklet task-executor="poolTaskExecutor">
                <batch:chunk reader="csvItemReader" writer="csvItemWriter" processor="csvProcessor"
                commit-interval="3000" skip-limit="100" skip-policy="myPolicy">
                    <batch:skippable-exception-classes>
                        <batch:exclude class="org.springframework.batch.item.file.FlatFileParseException"/>
                    </batch:skippable-exception-classes>
                </batch:chunk>
            </batch:tasklet>
          <!--  <tasklet transaction-manager="transactionManager">
                <chunk reader="csvItemReader" writer="csvItemWriter" processor="csvProcessor" commit-interval="1"
                       skip-limit="100">
                    <skippable-exception-classes>
                        <include class="org.springframework.batch.item.file.FlatFileParseException"/>
                        &lt;!&ndash;  <include class="java.lang.Exception"/>
                          <exclude class="java.io.FileNotFoundException"/>&ndash;&gt;
                    </skippable-exception-classes>
                </chunk>
            </tasklet>-->
        </batch:step>
    </batch:job>

    <!--数据库
    <bean id="jdbcCursorItemReader" class="org.springframework.batch.item.database.JdbcCursorItemReader">
        <property name="dataSource" ref=""/>
    </bean>
      <bean id="myWriter" class="com.varela.open.batch.writer.MyWriter"/>
    -->

    <!--读取文件-->
    <bean id="csvItemReader"
          class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <property name="resource" value="#{jobParameters['inputFile']}"/>
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer" ref="lineTokenizer"/>
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                <!--        <property name="prototypeBeanName" value="order"></property>  -->
                        <property name="targetType" value="com.varela.open.batch.pojo.Order"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="lineTokenizer" class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
        <property name="delimiter" value=","/>
        <property name="names">
            <list>
                <value>senderAddress</value>
                <value>latitude</value>
                <value>longitude</value>
                <value>deliveryAddress</value>
                <value>rLatitude</value>
                <value>rLongitude</value>
                <value>senderMobile</value>
                <value>receiverMobile</value>
            </list>
        </property>
    </bean>

    <!-- 写CSV文件 -->
    <bean id="csvItemWriter"
          class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
        <property name="resource" value="#{jobParameters['outputFile']}"/>
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
                <property name="delimiter" value=","></property>
                <property name="fieldExtractor">
                    <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                        <property name="names" value="senderAddress,latitude,longitude"></property>
                        <!--    ,deliveryAddress
                            ,rLatitude,rLongitude,senderMobile,receiverMobile-->
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
</beans>