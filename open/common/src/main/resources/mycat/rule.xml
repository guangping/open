<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mycat:rule SYSTEM "rule.dtd">
<mycat:rule xmlns:mycat="http://org.opencloudb/">
    <tableRule name="rule1">
        <rule>
            <columns>id</columns>
            <algorithm>sharding-by-long</algorithm>
        </rule>
    </tableRule>

    <tableRule name="rule2">
        <rule>
            <columns>user_id</columns>
            <algorithm>sharding-by-long</algorithm>
        </rule>
    </tableRule>

    <tableRule name="sharding-by-intfile">
        <rule>
            <columns>sharding_id</columns>
            <algorithm>hash-int</algorithm>
        </rule>
    </tableRule>
    <tableRule name="auto-sharding-long">
        <rule>
            <columns>id</columns>
            <algorithm>rang-long</algorithm>
        </rule>
    </tableRule>
    <tableRule name="mod-long">
        <rule>
            <columns>id</columns>
            <algorithm>mod-long</algorithm>
        </rule>
    </tableRule>
    <tableRule name="sharding-by-murmur">
        <rule>
            <columns>id</columns>
            <algorithm>sharding-by-hash</algorithm>
        </rule>
    </tableRule>
    <tableRule name="sharding-by-month">
        <rule>
            <columns>create_date</columns>
            <algorithm>partbymonth</algorithm>
        </rule>
    </tableRule>
    <tableRule name="latest-month-calldate">
        <rule>
            <columns>calldate</columns>
            <algorithm>latestMonth</algorithm>
        </rule>
    </tableRule>

    <tableRule name="auto-sharding-rang-mod">
        <rule>
            <columns>id</columns>
            <algorithm>rang-mod</algorithm>
        </rule>
    </tableRule>

    <tableRule name="jch">
        <rule>
            <columns>id</columns>
            <algorithm>jump-consistent-hash</algorithm>
        </rule>
    </tableRule>

    <!--一致性Hash分片：此规则优点在于扩容时迁移数据量比较少，前提分片节点比较多，虚拟节点分配多些。
        虚拟节点少的缺点是会造成数据分布不够均匀
        此规则优点在于扩容时迁移数据量比较少，前提分片节点比较多，虚拟节点分配多些。
        虚拟节点少的缺点是会造成数据分布不够均匀
        如果实际分片数量比较少，迁移量会比较多-->
    <function name="sharding-by-hash" class="org.opencloudb.route.function.PartitionByMurmurHash">
        <property name="seed">0</property><!-- 默认是0 -->
        <property name="count">2</property><!-- 要分片的数据库节点数量，必须指定，否则没法分片 -->
        <property name="virtualBucketTimes">160</property><!-- 一个实际的数据库节点被映射为这么多虚拟节点，默认是160倍，也就是虚拟节点数是物理节点数的160倍 -->
        <!-- <property name="weightMapFile">weightMapFile</property> 节点的权重，没有指定权重的节点默认是1。以properties文件的格式填写，以从0开始到count-1的整数值也就是节点索引为key，以节点权重值为值。所有权重值必须是正整数，否则以1代替 -->
        <!-- <property name="bucketMapPath">/etc/mycat/bucketMapPath</property>
            用于测试时观察各物理节点与虚拟节点的分布情况，如果指定了这个属性，会把虚拟节点的murmur hash值与物理节点的映射按行输出到这个文件，没有默认值，如果不指定，就不会输出任何东西 -->
    </function>

    <!--枚举分区  只支持partition-hash-int.txt文件中配置的值,不存在则报错
    枚举分片：通过在配置文件中配置可能的枚举id，自己配置分片，本规则适用于特定的场景，比如有些业务需要按照省份或区县来做保存，而全国省份区县固定的
    -->
    <function name="hash-int"
              class="org.opencloudb.route.function.PartitionByFileMap">
        <property name="mapFile">partition-hash-int.txt</property>
        <property name="type">0</property>
    </function>

    <!-- 自定义数字范围分片配置 范围切分的方式，制定基准列的取值范围，然后把这一范围的所有数据都放到一个DN上面-->
    <function name="rang-long"
              class="org.opencloudb.route.function.AutoPartitionByLong">
        <property name="mapFile">autopartition-long.txt</property>
    </function>

    <!--取余数-->
    <function name="mod-long" class="org.opencloudb.route.function.PartitionByMod">
        <!-- how many data nodes -->
        <property name="count">3</property>
    </function>

    <!--处于range-long和mod-long之间的一个略微折中的划分策略
        以1024为一个单位,每个DN存放partitionLength数量的数据,且,partitionCount x partitionLength=1024
        以partitionCount(4) x partitionLength(256)为例,sid%1024=0-255的放在DN1,256-511的放在DN2,以此类推

        这种切分策略也支持非均匀分布
        <property name="partitionCount">2,1</property>
        <property name="partitionLength">256,512</property>
    -->
    <function name="sharding-by-long" class="org.opencloudb.route.function.PartitionByLong">
        <property name="partitionCount">4</property>
        <property name="partitionLength">256</property>
    </function>

    <!--按照时间的切分策略，可以按月，按天切分-->

    <!--
    按单月小时分片：最小粒度是小时，可以一天最多24个分片，最少1个分片，一个月完后下月从头开始循环。
注意事项：每个月月尾，需要手工清理数据。
    -->
    <function name="latestMonth"
              class="org.opencloudb.route.function.LatestMonthPartion">
        <property name="splitOneDay">24</property>
    </function>

    <!--自然月分片：每个自然月一个分片-->
    <function name="partbymonth" class="org.opencloudb.route.function.PartitionByMonth">
        <property name="dateFormat">yyyy-MM-dd</property>
        <property name="sBeginDate">2015-01-01</property>
    </function>

    <function name="rang-mod" class="org.opencloudb.route.function.PartitionByRangeMod">
        <property name="mapFile">partition-range-mod.txt</property>
    </function>

    <function name="jump-consistent-hash" class="org.opencloudb.route.function.PartitionByJumpConsistentHash">
        <property name="totalBuckets">3</property>
    </function>

    <!--
    按日期（天）分片：从开始日期算起，按照天数来分片
例如，从2014-01-01，每10天一个分片
    -->
    <function name="sharding-by-date" class="org.opencloudb.route.function.PartitionByDate">
        <property name="dateFormat">yyyy-MM-dd</property>      <!--日期格式-->
        <property name="sBeginDate">2014-01-01</property>      <!--开始日期-->
        <property name="sPartionDay">10</property>             <!--每分片天数-->
    </function>

    <!--程序指定分区的分片：此规则是在运行阶段有应用自主决定路由到那个分片。
此方法为直接根据字符子串（必须是数字）计算分区号（由应用传递参数，显式指定分区号）-->
    <function name="sharding-by-substring" class="org.opencloudb.route.function.PartitionDirectBySubString">
        <property name="startIndex">0</property><!-- zero-based -->
        <property name="size">2</property>
        <property name="partitionCount">8</property>
        <property name="defaultPartition">0</property>
    </function>

    <!--符串hash分片 此规则是截取字符串中的int数值hash分片-->
    <function name="sharding-by-stringhash" class="org.opencloudb.route.function.PartitionByString">
        <property name="length">512</property><!-- zero-based -->
        <property name="count">2</property>
        <property name="hashSlice">0:2</property>
    </function>


</mycat:rule>
