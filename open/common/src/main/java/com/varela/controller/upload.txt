package com.horizon.better.web.controller;

import com.horizon.api.sns.pojo.APIResult;
import com.horizon.api.sns.pojo.Msg;
import com.horizon.better.svc.service.impl.QiniuUploadService;
import org.apache.commons.io.FileUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.*;

/**
 * Created by lance on 2016/4/6.
 */
@Controller
@RequestMapping("/file")
public class UploadController {

    @Autowired
    private QiniuUploadService uploadService;

    @ResponseBody
    @RequestMapping(value = "/uploadImage", method = RequestMethod.POST)
    public APIResult execute(HttpServletRequest request) {
        APIResult apiResult = new APIResult();
        apiResult.setMsg("参数错误!");
        try {
            CommonsMultipartResolver commonsMultipartResolver = new CommonsMultipartResolver(
                    request.getSession().getServletContext());
            if (commonsMultipartResolver.isMultipart(request)) {
                MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
                List<String> imageUrlList = upload(multipartRequest);
                StringBuffer pics = new StringBuffer(300);
                if (imageUrlList != null && imageUrlList.size() > 0) {
                    for (String pic : imageUrlList) {
                        pics.append(pic);
                        pics.append("|");
                    }
                    pics.deleteCharAt(pics.length() - 1);

                    Map<String, String> param = new HashMap<String, String>();
                    param.put("pics", pics.toString());
                    apiResult.setMsg(Msg.SUCCESS);
                    apiResult.setData(param);
                }
            }
        } catch (Exception e) {
            apiResult.setMsg(Msg.ERROR);
            apiResult.setData("{}");
            e.printStackTrace();
        }
        return apiResult;
    }

    private List<String> upload(MultipartHttpServletRequest request) {
        List<String> imageList = new ArrayList<>();
        String serverPath = request.getSession().getServletContext().getRealPath("/") + "/sns_image/";
        try {
            Iterator<String> iter = request.getFileNames();
            List<String> fileNames = new ArrayList<String>();
            while (iter.hasNext()) {
                fileNames.add(iter.next());
            }
            for (String fname : fileNames) {
                CommonsMultipartFile file = (CommonsMultipartFile) request.getFile(fname);
                String fileName = System.currentTimeMillis() + ".jpg";
                File dirPath = new File(serverPath);
                if (!dirPath.exists()) {
                    dirPath.mkdir();
                }
                File imgPath = new File(serverPath + fileName);
                FileUtils.copyInputStreamToFile(file.getInputStream(), imgPath);
                String fiName=this.uploadService.getFileName();
                BufferedImage bufferedImage = ImageIO.read(imgPath);
                if (null != bufferedImage) {
                    imageList.add(this.uploadService.getFileUrl(fiName)+ "?width=" + bufferedImage.getWidth() + "&height=" + bufferedImage.getHeight());
                } else {
                    imageList.add(this.uploadService.getFileUrl(fiName));
                }
                new UploadThread(imgPath.getPath(),fiName).start();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return imageList;
    }

    class UploadThread extends Thread {
        private String filePath;
        private String fileName;

        public UploadThread(String filePath, String fileName) {
            this.filePath = filePath;
            this.fileName = fileName;
        }

        @Override
        public void run() {
           try {
               uploadService.upload(filePath,fileName);
           }catch (Exception e){
               e.printStackTrace();
           }
        }
    }

}
